#include<cstdio>
#include<cstring>
#include<queue>
#include<vector>
using namespace std;

const int INF = 0x3f3f3f3f3f;
const int MAX = 500 + 5;

struct Edge {//有向边/弧
	int from, to, dist;
};

struct HeapNode { //Dijkstra算法用到的优先队列的结点
	int d, u;
	bool operator < (const HeapNode& rhs) const { return d > rhs.d; }
};

struct Dijkstra {
	int n, m;//点数和边数
	vector<Edge> edges;//边列表
	vector<int> G[MAX];//每个结点出发的边编号（从0开始编号）
	bool done[MAX];//是否已永久标号
	int d[MAX];//s到各个点的距离
	int p[MAX];//最短路中的上一条边

	void init(int n) {
		this->n = n;
		for (int i = 0; i < n; i++)
			G[i].clear();//清空邻接表
		edges.clear();//清空边表
	}

	void AddEdge(int from, int to, int dist) {//如果是无向图，每条无向边需调用两次AddEdge
		edges.push_back({ from, to, dist });
		m = edges.size();
		G[from].push_back(m - 1);
	}

	void dijkstra(int s) {//求s到所有点的距离
		priority_queue<HeapNode> Q;
		for (int i = 0; i < n; i++)
			d[i] = INF;
		d[s] = 0;
		memset(done, 0, sizeof(done));
		Q.push({ 0, s });
		while (!Q.empty()) {
			HeapNode x = Q.top();
			Q.pop();
			int u = x.u;
			if (done[u])
				continue;
			done[u] = true;
			for (int i = 0; i < G[u].size(); i++) {
				Edge &e = edges[G[u][i]];
				if (d[e.to] > d[u] + e.dist) {//松弛操作
					d[e.to] = d[u] + e.dist;
					p[e.to] = G[u][i];
					Q.push({ d[e.to], e.to });
				}
			}
		}
	}
};
